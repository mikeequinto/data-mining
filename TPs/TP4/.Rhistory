load("C:/Users/mikee/Downloads/Révisions/Data-Mining/.RData")
setwd("C:/HEG/Data-mining/TPs/TP4")
myData <- read.table("investing_program_prediction_data.csv", header=TRUE, sep=",")
barplot(prop.table(nb$apriori), main="Prior distribution of the class attribute InvType")
nb <- naiveBayes(as.factor(InvType)~.,data=myData)
library(e1071)
nb <- naiveBayes(as.factor(InvType)~.,data=myData)
nb
colClassesParams <- c("numeric", "character", rep("numeric", 7), rep("character", 15), rep("character", 3), "character")
myData <- read.table("investing_program_prediction_data.csv", header=TRUE, sep=",", colClasses=colClassesParams)
nb <- naiveBayes(as.factor(InvType)~.,data=myData)
nb
barplot(prop.table(nb$apriori), main="Prior distribution of the class attribute InvType")
barplot(prop.table(nb$tables$SE2), legend=T, main="Conditional distribution for SE2")
barplot(prop.table(nb$tables$SE2), legend=T, main="Conditional distribution of SE2")
barplot(prop.table(nb$tables$IA3), legend=T, main="Conditional distribution of IA3")
barplot(prop.table(nb$tables$PE10), legend=T, main="Conditional distribution of PE10")
## TP 4 Naive Bayes
## setwd("C:/HEG/Data-mining/TPs/TP4")
## colClassesParams <- c("numeric", "character", rep("numeric", 7), rep("character", 15), rep("character", 3), "character")
## myData <- read.table("investing_program_prediction_data.csv", header=TRUE, sep=",", colClasses=colClassesParams)
## Exact call for Naive Bayes
## runAnalysis("investing_program_prediction_data.csv", c("numeric", "character", rep("numeric", 7), rep("character", 15), rep("character", 3), "character"), naiveBayes, 28)
## Exact call for Default Classifier
## runAnalysis("investing_program_prediction_data.csv", c("numeric", "character", rep("numeric", 7), rep("character", 15), rep("character", 3), "character"), defaultClassifier, 28)
## Exact call for Naive Bayes final modèle
## runAnalysis("investing_program_prediction_data.csv", c("numeric", "character", rep("numeric", 7), rep("character", 15), rep("character", 3), "character"), naiveBayes_finalModel, 28)
## Other commands used
## Create final model
### nb <- naiveBayes(as.factor(InvType)~.,data=myData)
## Prior distribution of InvType
### barplot(prop.table(nb$apriori), main="Prior distribution of the class attribute InvType")
## Conditional distribution for discrete attributes
### barplot(prop.table(nb$tables$SE2), legend=T, main="Conditional distribution of SE2")
### barplot(prop.table(nb$tables$IA3), legend=T, main="Conditional distribution of IA3")
### barplot(prop.table(nb$tables$PE10), legend=T, main="Conditional distribution of PE10")
runAnalysis <- function(datasetName,colClassesParams, methodName, ClassAttributeIndex){
## package e1071
library(e1071)
## Read data
dataset<- read.table(datasetName,header=T,sep=",", colClasses=colClassesParams)
ClassAttributeName <- names(dataset)[ClassAttributeIndex]
if(as.character(substitute(methodName)) == "naiveBayes_finalModel"){
## Si on veut juste obtenir le modèle final
nbFinalModel <- naiveBayes(as.factor(InvType)~.,data=dataset)
nbFinalModel
}else{
## Set seed to get same sequence of random values
set.seed(100)
## Total for number of correct / accuracy
## To get average
AverageCorrect = 0
AverageAccuracy = 0
i = 0
while(i < 5){
#create the training dataset
#get 2/3 of the data for training
trainIndex <- sample(1:dim(dataset)[1], size=(2/3)*dim(dataset)[1])
trainData <- dataset[trainIndex,]
#Creating the testing data
#(actually the rest of the data)
testData <- dataset[-trainIndex,]
print(paste("Nombre d'instances dans le testData à classer : ", dim(testData)[1]))
if(as.character(substitute(methodName)) == "defaultClassifier"){
#Get the majority class which will be used to predict
predictions <- names(which.max(table(trainData[,ClassAttributeIndex])))
}else{
#Train a Naive Bayes
#The parameter:
# formula=type.~.
#sets the target/class variable to be the type.
#and use as predictive variables all the others
model <- methodName(as.factor(InvType)~.,data=trainData)
#get the predictions
predictions <- predict(model,testData)
}
#Compare the true labels of the
#testing instances with the predictions
CorrectWrong <- (predictions==testData[,ClassAttributeIndex])
#Get the Correct (i.e. TRUE above)
#which(CorrectWrong)
#Get the Number of Correct
numCorrect <- length(which(CorrectWrong))
print(paste("Nombre d'instances correctement classées : ", numCorrect))
#Get the accuracy, i.e. the % of correct
accuracy <- numCorrect/dim(testData)[1]
print(paste("Pourcentage d'instances bien classées : ", accuracy))
#Add Number of correct and accuracy
#To get average
AverageCorrect = AverageCorrect + numCorrect
AverageAccuracy = AverageAccuracy + accuracy
print("")
i=i+1
}
print("")
## Get average number of correct / accuracy
AverageCorrect = AverageCorrect / 5
AverageAccuracy = AverageAccuracy / 5
## Display average number of correct / accuracy
print(paste("Moyenne d'instances correctement classés : ", AverageCorrect))
print(paste("Moyenne de précision pour l'algorithme", as.character(substitute(methodName)), " : ", AverageAccuracy))
}
}
runAnalysis("investing_program_prediction_data.csv", c("numeric", "character", rep("numeric", 7), rep("character", 15), rep("character", 3), "character"), naiveBayes, 28)
nb
x <- nb$tables$SE1
x
x[0]
nb$tables$isnumeric
nb$tables$SE1$isnumeric
nb$tables$SE1
nb$tables$SE1=="C0"
nb$tables$SE1[,1]
nb$tables$SE1[1,]
nb$tables$SE1[,1]
nb$tables$SE1[1,1]
mean.SE1.C0 <- $nb$tables$SE1[,1,1]
mean.SE1.C0 <- $nb$tables$SE1[1,1]
mean.SE1.C0 <- nb$tables$SE1[1,1]
sd.SE1.C0 <- nb$tables$SE1[1,2]
mean.SE1.C0
sd.SE1.C0
dnorm(nb$SE1, mean.SE1.C0, sd.SE1.C0)
dnorm(table(nb$SE1), mean.SE1.C0, sd.SE1.C0)
nb$tables$SE1
barplot(myData[,1])
barplot(table(myData[,1])
)
dnorm(table(myData[,1]), mean.SE1.C0, sd.SE1.C0)
dnorm(myData[,1], mean.SE1.C0, sd.SE1.C0)
y <- dnorm(myData[,1], mean.SE1.C0, sd.SE1.C0)
plot(myData[,1],y)
y==40
table(y)
table(y==40)
prop.table(table(y==40))
nb$isnumeric
nb$SE2
nb$Stables$E2
nb$tables$SE2
nb$tables$SE1
y <- dnorm(myData[,1], mean.SE1.C0, sd.SE1.C0)
x <- myData[,1]
plot(x,y)
y(1)
y[1]
y[40]
y[60]
y[50]
y <- dnorm(x, mean.SE1.C0, sd.SE1.C0)
x <- myData[myData[,28]=="C0",1]
x
y <- dnorm(x, mean.SE1.C0, sd.SE1.C0)
plot(x,y)
y[48]
which.max(y)
sort(table[x])
sort(table(x))
plot(x,y, xlab="SE1, ylab="probability of SE1", main="Gaussian distribution of SE1 given InvType=C0")
plot(x,y, xlab="SE1", ylab="probability of SE1", main="Gaussian distribution of SE1 given InvType=C0")
